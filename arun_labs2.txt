this is my second unix lab session
we studied many commands
like
1 who
2 is
3 cal
4 bc
5 data
6 time
7 uname

       who - show who is logged on

SYNOPSIS
       who [OPTION]... [ FILE | ARG1 ARG2 ]

DESCRIPTION
       Print information about users who are currently logged in.

       -a, --all
              same as -b -d --login -p -r -t -T -u

       -b, --boot
              time of last system boot

       -d, --dead
              print dead processes

       -H, --heading
              print line of column headings

       --ips  print  ips  instead  of  hostnames. with --lookup, canonicalizes
              based on stored IP, if available, rather than stored hostname

       -l, --login
              print system login processes

       --lookup
              attempt to canonicalize hostnames via DNS

       -m     only hostname and user associated with stdin

       -p, --process
              print active processes spawned by init

       -q, --count
              all login names and number of users logged on

       -r, --runlevel
              print current runlevel

       -s, --short

ls
arun_labs2.txt
LS(1)                                                                      User Commands                                                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              scale sizes by SIZE before printing them; e.g., '--block-size=M' prints sizes in units of 1,048,576 bytes; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with  -lt:  sort by, and show, ctime (time of last modification of file status information); with -l: show ctime and sort by name; otherwise: sort by
              ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'always' (default if omitted), 'auto', or 'never'; more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode
  -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -Z, --context
              print any security context of each file

       -1     list one file per line.  Avoid '\n' with -q or -b

       --help display this help and exit

       --version
              output version information and exit

       The SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).

       Using color to distinguish file types is disabled both by default and with --color=never.  With --color=auto, ls emits color codes only when standard output
       is connected to a terminal.  The LS_COLORS environment variable can change the settings.  Use the dircolors command to set it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <http://www.gnu.org/software/coreutils/>
       Report ls translation bugs to <http://translationproject.org/team/>

COPYRIGHT
       Copyright © 2016 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

 cal
   February 2018      
Su Mo Tu We Th Fr Sa  
             1  2  3  
 4  5  6  7  8  9 10  
11 12 13 14 15 16 17  
18 19 20 21 22 23 24  
25 26 27 28           


CAL(1)                                                              BSD General Commands Manual                                                              CAL(1)

NAME
     cal, ncal — displays a calendar and the date of Easter

SYNOPSIS
     cal [-31jy] [-A number] [-B number] [-d yyyy-mm] [[month] year]
     cal [-31j] [-A number] [-B number] [-d yyyy-mm] -m month [year]
     ncal [-C] [-31jy] [-A number] [-B number] [-d yyyy-mm] [[month] year]
     ncal [-C] [-31j] [-A number] [-B number] [-d yyyy-mm] -m month [year]
     ncal [-31bhjJpwySM] [-A number] [-B number] [-H yyyy-mm-dd] [-d yyyy-mm] [-s country_code] [[month] year]
     ncal [-31bhJeoSM] [-A number] [-B number] [-d yyyy-mm] [year]

DESCRIPTION
     The cal utility displays a simple calendar in traditional format and ncal offers an alternative layout, more options and the date of Easter.  The new format
     is a little cramped but it makes a year fit on a 25x80 terminal.  If arguments are not specified, the current month is displayed.

     The options are as follows:

     -h      Turns off highlighting of today.

     -J      Display Julian Calendar, if combined with the -o option, display date of Orthodox Easter according to the Julian Calendar.

     -e      Display date of Easter (for western churches).

     -j      Display Julian days (days one-based, numbered from January 1).

     -m month
             Display the specified month.  If month is specified as a decimal number, appending ‘f’ or ‘p’ displays the same month of the following or previous
             year respectively.

     -o      Display date of Orthodox Easter (Greek and Russian Orthodox Churches).

     -p      Print the country codes and switching days from Julian to Gregorian Calendar as they are assumed by ncal.  The country code as determined from the
             local environment is marked with an asterisk.

     -s country_code
             Assume the switch from Julian to Gregorian Calendar at the date associated with the country_code.  If not specified, ncal tries to guess the switch
             date from the local environment or falls back to September 2, 1752.  This was when Great Britain and her colonies switched to the Gregorian Calendar.

     -w      Print the number of the week below each week column.

     -y      Display a calendar for the specified year. This option is implied when a year but no month are specified on the command line.

The options are as follows:

     -h      Turns off highlighting of today.

     -J      Display Julian Calendar, if combined with the -o option, display date of Orthodox Easter according to the Julian Calendar.

     -e      Display date of Easter (for western churches).

     -j      Display Julian days (days one-based, numbered from January 1).

     -m month
             Display the specified month.  If month is specified as a decimal number, appending ‘f’ or ‘p’ displays the same month of the following or previous
             year respectively.

     -o      Display date of Orthodox Easter (Greek and Russian Orthodox Churches).

     -p      Print the country codes and switching days from Julian to Gregorian Calendar as they are assumed by ncal.  The country code as determined from the
             local environment is marked with an asterisk.

     -s country_code
             Assume the switch from Julian to Gregorian Calendar at the date associated with the country_code.  If not specified, ncal tries to guess the switch
             date from the local environment or falls back to September 2, 1752.  This was when Great Britain and her colonies switched to the Gregorian Calendar.

     -w      Print the number of the week below each week column.

     -y      Display a calendar for the specified year. This option is implied when a year but no month are specified on the command line.

     -3      Display the previous, current and next month surrounding today.

     -1      Display only the current month. This is the default.

     -A number
             Months to add after. The specified number of months is added to the end of the display. This is in addition to any date range selected by the -y, -3,
             or -1 options. For example, “cal -y -B2 -A2” shows everything from November of the previous year to February of the following year. Negative numbers
             are allowed, in which case the specified number of months is subtracted. For example, “cal -y -B-6” shows July to December. And “cal -A11” simply
             shows the next 12 months.

     -B number
             Months to add before. The specified number of months is added to the beginning of the display. See -A for examples.

     -C      Completely switch to cal mode. For cal like output only, use -b instead.
 -N      Switch to ncal mode.

     -d yyyy-mm
             Use yyyy-mm as the current date (for debugging of date selection).

     -H yyyy-mm-dd
             Use yyyy-mm-dd as the current date (for debugging of highlighting).

     -M      Weeks start on Monday.

     -S      Weeks start on Sunday.

     -b      Use oldstyle format for ncal output.

     A single parameter specifies the year (1–9999) to be displayed; note the year must be fully specified: “cal 89” will not display a calendar for 1989.  Two
     parameters denote the month and year; the month is either a number between 1 and 12, or a full or abbreviated name as specified by the current locale.  Month
     and year default to those of the current system clock and time zone (so “cal -m 8” will display a calendar for the month of August in the current year).

     Not all options can be used together. For example, the options -y, -3, and -1 are mutually exclusive. If inconsistent options are given, the later ones take
     precedence over the earlier ones.

     A year starts on January 1.

SEE ALSO
     calendar(3), strftime(3)

HISTORY
     A cal command appeared in Version 5 AT&T UNIX.  The ncal command appeared in FreeBSD 2.2.6.  The output of the cal command is supposed to be bit for bit com‐
     patible to the original Unix cal command, because its output is processed by other programs like CGI scripts, that should not be broken. Therefore it will
     always output 8 lines, even if only 7 contain data. This extra blank line also appears with the original cal command, at least on Solaris 8

AUTHORS
     The ncal command and manual were written by Wolfgang Helbig <helbig@FreeBSD.org>.

BUGS
     The assignment of Julian–Gregorian switching dates to country codes is historically naive for many countries.

     Not all options are compatible and using them in different orders will give varying results.
 date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       --debug
              annotate the parsed date, and warn about questionable usage to stderr

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'minutes', 'seconds', or 'ns' for date and time to the indi‐
              cated precision.  Example: 2006-08-14T02:34:56-06:00

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
              output date/time in RFC 3339 format.   FMT='date',  'seconds',  or  'ns'  for  date  and  time  to  the  indicated  precision.   Example:  2006-08-14
              02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit
 Manual page date(1) line 1/192 30% (press h for help or q to quit)
FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)

       %c     locale's date and time (e.g., Thu Mar  3 23:05:25 2005)

       %C     century; like %Y, except omit last two digits (e.g., 20)

       %d     day of month (e.g., 01)

       %D     date; same as %m/%d/%y

       %e     day of month, space padded; same as %_d

       %F     full date; same as %Y-%m-%d

       %g     last two digits of year of ISO week number (see %G)

       %G     year of ISO week number (see %V); normally useful only with %V

       %h     same as %b

       %H     hour (00..23)

       %I     hour (01..12)

       %j     day of year (001..366)

       %k     hour, space padded ( 0..23); same as %_H

       %l     hour, space padded ( 1..12); same as %_I

       %m     month (01..12)
 Manual page date(1) line 46/192 46% (press h for help or q to quit)
 %X     locale's time representation (e.g., 23:13:48)

       %y     last two digits of year (00..99)

       %Y     year

       %z     +hhmm numeric time zone (e.g., -0400)

       %:z    +hh:mm numeric time zone (e.g., -04:00)

       %::z   +hh:mm:ss numeric time zone (e.g., -04:00:00)

       %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)

       %Z     alphabetic time zone abbreviation (e.g., EDT)

       By default, date pads numeric fields with zeroes.  The following optional flags may follow '%':

       -      (hyphen) do not pad the field

       _      (underscore) pad with spaces

       0      (zero) pad with zeros

       ^      use upper case if possible

       #      use opposite case if possible

       After  any  flags comes an optional field width, as a decimal number; then an optional modifier, which is either E to use the locale's alternate representa‐
       tions if available, or O to use the locale's alternate numeric symbols if available.

EXAMPLES
       Convert seconds since the epoch (1970-01-01 UTC) to a date

              $ date --date='@2147483647'

       Show the time on the west coast of the US (use tzselect(1) to find TZ)

              $ TZ='America/Los_Angeles' date

       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'
       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'

DATE STRING
       The --date=STRING is a mostly free format human readable date string such as "Sun, 29 Feb 2004 16:21:42 -0800" or "2004-02-29 16:21:42" or even "next Thurs‐
       day".   A  date string may contain items indicating calendar date, time of day, time zone, day of week, relative time, relative date, and numbers.  An empty
       string indicates the beginning of the day.  The date string format is more complex than is easily documented here but is fully described in the  info  docu‐
       mentation.

AUTHOR
       Written by David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <http://www.gnu.org/software/coreutils/>
       Report date translation bugs to <http://translationproject.org/team/>

COPYRIGHT
       Copyright © 2016 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: <http://www.gnu.org/software/coreutils/date>
       or available locally via: info '(coreutils) date invocation'

GNU coreutils 8.26                                                          October 2017                                                                    DATE(1)
 Manual page date(1) line 149/192 (END) (press h for help or q to quit)
TIME(1)                                                               General Commands Manual                                                               TIME(1)

NAME
       time - run programs and summarize system resource usage

SYNOPSIS
       time   [ -apqvV ] [ -f FORMAT ] [ -o FILE ]
              [ --append ] [ --verbose ] [ --quiet ] [ --portability ]
              [ --format=FORMAT ] [ --output=FILE ] [ --version ]
              [ --help ] COMMAND [ ARGS ]

DESCRIPTION
       time run the program COMMAND with any given arguments ARG....  When COMMAND finishes, time displays information about resources used by COMMAND (on the
       standard error output, by default).  If COMMAND exits with non-zero status, time displays a warning message and the exit status.

       time determines which information to display about the resources used by the COMMAND from the string FORMAT.  If no format is specified on the command line,
       but the TIME environment variable is set, its value is used as the format.  Otherwise, a default format built into time is used.

       Options to time must appear on the command line before COMMAND.  Anything on the command line after COMMAND is passed as arguments to COMMAND.

OPTIONS
       -o FILE, --output=FILE
              Write the resource use statistics to FILE instead of to the standard error stream.  By default, this overwrites the file, destroying the file's
              previous contents.  This option is useful for collecting information on interactive programs and programs that produce output on the standard error
              stream.

       -a, --append
              Append the resource use information to the output file instead of overwriting it.  This option is only useful with the `-o' or `--output' option.

       -f FORMAT, --format FORMAT
              Use FORMAT as the format string that controls the output of time.  See the below more information.

       --help Print a summary of the command line options and exit.

       -p, --portability
              Use the following format string, for conformance with POSIX standard 1003.2:
                        real %e
                        user %U
                        sys %S

       -v, --verbose
              Use the built-in verbose format, which displays each available piece of information on the program's resource use on its own line, with an English
              description of its meaning.
FORMATTING THE OUTPUT
       The format string FORMAT controls the contents of the time output.  The format string can be set using the `-f' or `--format', `-v' or `--verbose', or `-p'
       or `--portability' options.  If they are not given, but the TIME environment variable is set, its value is used as the format string.  Otherwise, a built-in
       default format is used.  The default format is:
         %Uuser %Ssystem %Eelapsed %PCPU (%Xtext+%Ddata %Mmax)k
         %Iinputs+%Ooutputs (%Fmajor+%Rminor)pagefaults %Wswaps

       The format string usually consists of `resource specifiers' interspersed with plain text.  A percent sign (`%') in the format string causes the following
       character to be interpreted as a resource specifier, which is similar to the formatting characters in the printf(3) function.

       A backslash (`\') introduces a `backslash escape', which is translated into a single printing character upon output.  `\t' outputs a tab character, `\n'
       outputs a newline, and `\\' outputs a backslash.  A backslash followed by any other character outputs a question mark (`?') followed by a backslash, to
       indicate that an invalid backslash escape was given.

       Other text in the format string is copied verbatim to the output.  time always prints a newline after printing the resource use information, so normally
       format strings do not end with a newline character (or `\n').

       There are many resource specifications.  Not all resources are measured by all versions of Unix, so some of the values might be reported as zero.  Any
       character following a percent sign that is not listed in the table below causes a question mark (`?') to be output, followed by that character, to indicate
       that an invalid resource specifier was given.

       The resource specifiers, which are a superset of those recognized by the tcsh(1) builtin `time' command, are:
              %      A literal `%'.
              C      Name and command line arguments of the command being timed.
              D      Average size of the process's unshared data area, in Kilobytes.
              E      Elapsed real (wall clock) time used by the process, in [hours:]minutes:seconds.
              F      Number of major, or I/O-requiring, page faults that occurred while the process was running.  These are faults where the page has actually
                     migrated out of primary memory.
              I      Number of file system inputs by the process.
              K      Average total (data+stack+text) memory use of the process, in Kilobytes.
              M      Maximum resident set size of the process during its lifetime, in Kilobytes.
              O      Number of file system outputs by the process.
              P      Percentage of the CPU that this job got.  This is just user + system times divided by the total running time.  It also prints a percentage
                     sign.
              R      Number of minor, or recoverable, page faults.  These are pages that are not valid (so they fault) but which have not yet been claimed by other
                     virtual pages.  Thus the data in the page is still valid but the system tables must be updated.
              S      Total number of CPU-seconds used by the system on behalf of the process (in kernel mode), in seconds.
              U      Total number of CPU-seconds that the process used directly (in user mode), in seconds.
              W      Number of times the process was swapped out of main memory.
              X      Average amount of shared text in the process, in Kilobytes.
              Z      System's page size, in bytes.  This is a per-system constant, but varies between systems.
              c      Number of times the process was context-switched involuntarily (because the time slice expired).
              e      Elapsed real (wall clock) time used by the process, in seconds.
              k      Number of signals delivered to the process.
 Manual page time(1) line 51 (press h for help or q to quit)
 r      Number of socket messages received by the process.
              s      Number of socket messages sent by the process.
              t      Average resident set size of the process, in Kilobytes.
              w      Number of times that the program was context-switched voluntarily, for instance while waiting for an I/O operation to complete.
              x      Exit status of the command.

EXAMPLES
       To run the command `wc /etc/hosts' and show the default information:
            time wc /etc/hosts

       To run the command `ls -Fs' and show just the user, system, and total time:
            time -f "\t%E real,\t%U user,\t%S sys" ls -Fs

       To edit the file BORK and have `time' append the elapsed time and number of signals to the file `log', reading the format string from the environment
       variable `TIME':
            export TIME="\t%E,\t%k" # If using bash or ksh
            setenv TIME "\t%E,\t%k" # If using csh or tcsh
            time -a -o log emacs bork

       Users of the bash shell need to use an explicit path in order to run the external time command and not the shell builtin variant.  On system where time is
       installed in /usr/bin, the first example would become
            /usr/bin/time wc /etc/hosts

ACCURACY
       The elapsed time is not collected atomically with the execution of the program; as a result, in bizarre circumstances (if the time command gets stopped or
       swapped out in between when the program being timed exits and when time calculates how long it took to run), it could be much larger than the actual
       execution time.

       When the running time of a command is very nearly zero, some values (e.g., the percentage of CPU used) may be reported as either zero (which is wrong) or a
       question mark.

       Most information shown by time is derived from the wait3(2) system call.  The numbers are only as good as those returned by wait3(2).  On systems that do
       not have a wait3(2) call that returns status information, the times(2) system call is used instead.  However, it provides much less information than
       wait3(2), so on those systems time reports the majority of the resources as zero.

       The `%I' and `%O' values are allegedly only `real' input and output and do not include those supplied by caching devices.  The meaning of `real' I/O
       reported by `%I' and `%O' may be muddled for workstations, especially diskless ones.

DIAGNOSTICS
       The time command returns when the program exits, stops, or is terminated by a signal.  If the program exited normally, the return value of time is the
       return value of the program it executed and measured.  Otherwise, the return value is 128 plus the number of the signal which caused the program to stop or
       terminate.
DIAGNOSTICS
       The time command returns when the program exits, stops, or is terminated by a signal.  If the program exited normally, the return value of time is the
       return value of the program it executed and measured.  Otherwise, the return value is 128 plus the number of the signal which caused the program to stop or
       terminate.
AUTHOR
       time was written by David MacKenzie.  This man page was added by Dirk Eddelbuettel <edd@debian.org>, the Debian GNU/Linux maintainer, for use by the Debian
       GNU/Linux distribution but may of course be used by others.

SEE ALSO
       tcsh(1), printf(3)
UNAME(1)                                                                   User Commands                                                                   UNAME(1)

NAME
       uname - print system information

SYNOPSIS
       uname [OPTION]...

DESCRIPTION
       Print certain system information.  With no OPTION, same as -s.

       -a, --all
              print all information, in the following order, except omit -p and -i if unknown:

       -s, --kernel-name
              print the kernel name

       -n, --nodename
              print the network node hostname

       -r, --kernel-release
              print the kernel release

       -v, --kernel-version
              print the kernel version

       -m, --machine
              print the machine hardware name

       -p, --processor
              print the processor type (non-portable)

       -i, --hardware-platform
              print the hardware platform (non-portable)

       -o, --operating-system
              print the operating system

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
REPORTING BUGS
       GNU coreutils online help: <http://www.gnu.org/software/coreutils/>
       Report uname translation bugs to <http://translationproject.org/team/>

COPYRIGHT
       Copyright © 2016 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       arch(1), uname(2)

       Full documentation at: <http://www.gnu.org/software/coreutils/uname>
       or available locally via: info '(coreutils) uname invocation'

GNU coreutils 8.26                     


